GITでのコマンド
・バージョン管理
　　管理したいディレクトリに移動後　git init ★
　　.gitフォルダが作成されるので管理開始
・GitHub側にリポジトリ作成
　　Webブラウザで作業する
・フロー
　　ファイル変更　　　　→　ステージングエリアへ追加　git add★ (まとめてコミットもできるが、1作業ごとにファイルを選んでコミットできるのがよい。）
　　ステージングエリア　→　ローカルリポジトリへ　git commit (-v) ★（変更にメッセージをつけてリポジトリに記録する。コミットは1つの変更毎に実施することで、どの作業のための変更なのかがわかる
　　ローカルリポジトリ　→リモートリポジトリへ　　git push★
・コミット時には分かりやすいMSG
　　1行目　変更内容の要約　【タイトル・概要】
　　2行目　空行
　　3行目　理由　　【何の変更を何のために実施したのか、変更の背景】
　を書けばいい。
・GITリポジトリの今の状況確認
　　　git status ★
　 git commitしてからのファイルの変更差分　
   ステージにあげられていない変更、コミットされていない変更が表示される。　　
　 add , commit されていなくても、フォルダ内のファイルが変わった場合はこれでわかる
・コメントをまとめて確認　git log ★
　コミットされたハッシュ値、だれが、いつ、何の変更をしたのかがわかる
     git log --oneline
     git log -p ファイル名指定　　→　1つのファイルに絞って変更履歴　　
　　 git log -n 3 (最新の3つだけ）
　　 git log -p 　　　→すべての変更履歴 
・ファイルの変更だけではなく、追加、削除のコミットも必要
　　　新規作成　　　　　　　git add ファイル名　(同じ）
　　　削除　　　　　　　　　git rm ファイル名　 ★　（消した場合はaddではだめ）
　　　複数ファイルの変更    git add .(全部)
・ファイルの変更差分の表示
　　 git diff　★　　(ステージングとローカルの差分の確認）　：add前
　　 git diff head ★　（ステージングと最新コミットとの差分）　：comitt前
　   #git add , git commit の前に確認する。ローカルとステージングの差分を表示する。
・リモートリポジトリ（GitHub）へファイルをPUSHする
　　 git remote add 　origin   https://github.com/。。。。。 (HTML画面に出るやつ）
　　リモートリポジトリを登録する場合はデフォでoriginという名前
　　git push origin master ★　（originというリモートリポジトリへ　masterブランチを送付する）
・GITで管理したくないfileの扱い
　　.gitignore　に設定する。
　　パスワードが記載されるファイル、　OSで自動で生成されるファイル
・登録されちゃったGit対象fileを削除したい場合
　　ファイルを削除したうえで。。。
　　git rm フィル名　★
　　git rm -r ディレクトリ名　★
・GITの公式ドキュメント　　　  https://git-scm.com/book/en/v2
  ATTlassianのGITチュートリアル　　 https://www.atlassian.com/ja/git/tutorials